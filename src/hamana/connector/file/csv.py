import csv
import logging
import warnings
from pathlib import Path

from ...connector.db.query import QueryColumn, ColumnDataType
from .exceptions import CSVColumnNumberMismatchError
from .warning import DialectMismatchWarning

# set logger
logger = logging.getLogger(__name__)

class CSV:
    """
        Class representing the connector to a CSV file.  

        Observe that when the object is initialized, the class is not going
        to read the CSV file; the class only performs checks on the file 
        and extract metadata.

        To process the CSV file, use the methods `execute()` or `to_sqlite()`.

        Parameters:
            file_path: Path to the CSV file.
            dialect: Dialect of the CSV file; the dialect is a class that defines 
                the parameters for reading and writing CSV files, such as the 
                delimiter, quotechar, and quoting. Commonly used dialects are:  
                    `csv.excel`: the dialect to use for CSV generated by Excel.
                    `csv.excel_tab`: the dialect to use for tab-delimited files that are generated by Excel. 
                    `csv.unix_dialect`: the dialect to use for Unix-style CSV files.
                If `None`, the class will try to infer the dialect of the CSV 
                file by using the `csv.Sniffer.sniff()` method.
            has_header: Flag to indicate if the CSV file has a header.  
                If `None`, the class will try to infer if the file has a header; observe 
                that this method could lead to false positives.
            columns: List of columns in the CSV file.
                By default, the class will try to infer the columns directly from 
                the file. If the header is not available, then by default, the 
                names of the columns will be `column_1`, `column_2`, and so on. 
                Moreover, the data type of the columns will be set by default to 
                `ColumnDataType.TEXT`.
    """

    # variables
    file_path: Path
    """Path and name of the CSV file."""

    file_name: str
    """Name of the CSV file."""

    dialect: type[csv.Dialect]
    """Dialect of the CSV file."""

    has_header: bool
    """Flag to indicate if the CSV file has a header."""

    columns: list[QueryColumn]
    """List of columns in the CSV file."""

    def __init__(
        self,
        file_path: str | Path,
        dialect: type[csv.Dialect] | None = None,
        has_header: bool | None = None,
        columns: list[QueryColumn] | None = None
    ) -> None:
        logger.debug("start")

        self.file_path = Path(file_path)
        logger.debug(f"file_path: {self.file_path}")

        # check file existance
        if not self.file_path.exists():
            error_msg = f"File not found: {self.file_path}"
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)

        # set file name
        self.file_name = self.file_path.name
        logger.debug(f"file_name: {self.file_name}")

        # set dialect
        infer_dialect = self._infer_dialect()
        if dialect is None:
            logger.info("dialect is not provided, trying to infer..")
            self.dialect = infer_dialect
        else:
            # compare dialect with inferred dialect
            self._compare_dialects(dialect, infer_dialect)
            self.dialect = dialect

        # set has_header
        if has_header is None:
            logger.info("has_header is not provided, trying to infer..")
            has_header = self._check_has_header()
        self.has_header = has_header
        logger.debug(f"has_header: {self.has_header}")

        # set columns
        infer_columns = self._infer_columns()
        if columns is None:
            logger.info("columns are not provided, trying to infer..")
            self.columns = infer_columns
        else:
            # compare columns with inferred columns
            if len(columns) != len(infer_columns):
                error_msg = f"Number of columns mismatch: provided ({len(columns)}) != inferred ({len(infer_columns)})"
                raise CSVColumnNumberMismatchError(error_msg)
            self.columns = columns

        logger.debug("end")
        return

    def _infer_dialect(self) -> type[csv.Dialect]:
        """
            Check the dialect of the CSV file.  
            This method uses the `csv.Sniffer.sniff()` method to infer the 
            dialect of the CSV file.

            Returns:
                The dialect of the CSV file.
        """
        logger.debug("start")

        with open(self.file_path, "r", newline = "") as file:
            dialect = csv.Sniffer().sniff(file.read(2048))

        logger.debug("end")
        return dialect

    def _compare_dialects(self, reference_dialect: type[csv.Dialect], target_dialect: type[csv.Dialect]) -> None:
        """
            Compare two dialects.  
            This method compares two dialects and logs a warning message if 
            the dialects are different.

            Parameters:
                reference_dialect: Reference dialect.
                target_dialect: Target dialect.
        """
        logger.debug("start")

        dialect_attributes = [
            "delimiter",
            "quotechar",
            "doublequote",
            "skipinitialspace",
            "lineterminator",
            "quoting",
            "escapechar"
        ]

        for attribute in dialect_attributes:
            reference_value = getattr(reference_dialect, attribute)
            target_value = getattr(target_dialect, attribute)
            if reference_value != target_value:
                # raise warning
                warning_msg = f"WARNING (attribute '{attribute}' mismatch): reference ({reference_value}) != target ({target_value})"
                warnings.warn(warning_msg, DialectMismatchWarning)

        logger.debug("end")
        return

    def _check_has_header(self) -> bool:
        """
            Check if the CSV file has a header.  
            This method leverages in the `csv.Sniffer.has_header()` method 
            to determine if the CSV file has a header; as specified in the 
            offical Python documentation, this method could leas to false 
            positives.

            Returns:
                True if the CSV file has a header, False otherwise.
        """
        logger.debug("start")

        with open(self.file_path, "r", newline = "") as file:
            has_header = csv.Sniffer().has_header(file.read(2048))

        logger.debug("end")
        return has_header

    def _infer_columns(self) -> list[QueryColumn]:
        """
            Infer the columns of the CSV file.

            This method reads the first row of the CSV file and 
            infers the columns. Observe that if the header is not 
            available, then by default, the names of the columns 
            will be `column_1`, `column_2`, and so on.

            By default, all the infered columns will have the 
            data type `ColumnDataType.TEXT`.

            Returns:
                List of columns in the CSV file.
        """
        logger.debug("start")

        columns = []

        # read first row
        with open(self.file_path, "r", newline = "") as file:
            reader = csv.reader(file, dialect = self.dialect)
            header = next(reader)

        # set columns
        for i, column in enumerate(header):
            columns.append(
                QueryColumn(
                    order = i,
                    name = column if self.has_header else f"column_{i + 1}",
                    dtype = ColumnDataType.TEXT
                )
            )

        logger.debug("end")
        return columns