name: tests

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
  release:
    types: [created]
  workflow_dispatch: # allow manual trigger

jobs:
  lint:
    name: execute the lint on hamana code and tests code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # setup python
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      # manage caches
      - name: create cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-py-${{ env.pythonLocation }}-${{ hashFiles('tests/requirements.txt') }}-lint

      # install dependencies
      - name: install pip and dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pip
          pip install -r tests/requirements.txt

      # execute lint
      - name: execute lint
        run: ruff check src/hamana tests

  test:
    name: execute the tests on the library code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.12
    steps:
      - uses: actions/checkout@v4

      # setup environment
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # manage caches
      - name: create cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-py-${{ env.pythonLocation }}-${{ hashFiles('tests/requirements.txt', 'src/requirements.txt', 'pyproject.toml') }}-test

      # install dependencies
      - name: install pip and dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install -r src/requirements.txt
          pip install -e .

      # init test data
      - name: init test data
        run: |
          mkdir -p tests/data/db
          mkdir -p tests/data/file
          python tests/init.py

      # execute tests
      - name: execute pytest coverage
        run: coverage run -m pytest -v -s tests
        env:
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: generate coverage report
        run: coverage report -m

      # generate/upload coverage HTML
      - name: generate coverage html
        run: coverage html --show-contexts --title "Coverage Report - hamana (${{ github.sha }})"
      - name: upload coverage html
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov